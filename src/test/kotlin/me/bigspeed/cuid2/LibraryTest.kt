/*
 * This source file was generated by the Gradle 'init' task
 */
package me.bigspeed.cuid2

import org.junit.jupiter.api.assertDoesNotThrow
import org.junit.jupiter.api.assertThrows
import kotlin.test.*

class LibraryTest {
    @Test
    fun cuidIsAString() {
        val cuid = CuidGenerator()

        assertIs<String>(cuid.generate(), "CUID should be a string")
    }

    @Test
    fun cuidIsTheCorrectLength() {
        val defaultLength = CuidGenerator()
        val shortLength = CuidGenerator(10)
        val longLength = CuidGenerator(32)

        assertEquals(24, defaultLength.generate().length, "CUID should default to 24 characters")
        assertEquals(10, shortLength.generate().length, "CUID should respect given short length")
        assertEquals(32, longLength.generate().length, "CUID should respect given length")
    }

    @Test
    fun cuidLengthMustBeValid() {
        assertThrows<IllegalArgumentException>("CUID shouldn't allow negative length") { CuidGenerator(-1).generate() }
        assertThrows<IllegalArgumentException>("CUID shouldn't allow a length larger than 32") { CuidGenerator(70).generate() }
        assertDoesNotThrow("CUID should allow other arbitrary length") { CuidGenerator(16).generate() }
    }

    @Test
    fun cuidValidationWorks() {
        val gen = CuidGenerator()

        assertTrue("Valid cuid should be true") {
            val validCuid = gen.generate()
            CuidGenerator.isValid(validCuid)
        }

        assertFalse("String that's too long should be invalid") {
            val invalidCuid = "${gen.generate()}${gen.generate()}${gen.generate()}"
            CuidGenerator.isValid(invalidCuid)
        }

        assertFalse("Empty string should be invalid") { CuidGenerator.isValid("") }
    }
}
